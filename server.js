// server.js
// SurfAI Backend avec Profil Utilisateur √âtendu + Sessions UX + IA

const express = require('express');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3001;

// ===== MIDDLEWARE =====
app.use(cors());
app.use(express.json());

// Middleware de logging
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// ===== IMPORTS DES ROUTES =====

// Routes existantes (si elles existent)
let smartSlotsRouter;
try {
  smartSlotsRouter = require('./src/routes/smartSlots');
} catch (error) {
  console.log('Routes smartSlots non trouv√©es, cr√©ation de routes mock...');
}

// Routes profil
let profileRouter;
try {
  profileRouter = require('./src/routes/profile');
  console.log('‚úÖ Routes profil charg√©es avec succ√®s');
} catch (error) {
  console.log('‚ùå Erreur chargement routes profil:', error.message);
}

// Routes sessions
let sessionsRouter;
try {
  sessionsRouter = require('./src/routes/sessions');
  console.log('‚úÖ Routes sessions charg√©es avec succ√®s');
} catch (error) {
  console.log('‚ùå Erreur chargement routes sessions:', error.message);
}

// Routes IA predictions (NOUVEAU)
let aiPredictionsRouter;
try {
  aiPredictionsRouter = require('./src/routes/ai-predictions');
  console.log('‚úÖ Routes IA pr√©dictions charg√©es avec succ√®s');
} catch (error) {
  console.log('‚ùå Erreur chargement routes IA:', error.message);
}

// ===== ROUTES DE BASE =====

// Route de sant√©
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    services: {
      smartSlots: smartSlotsRouter ? 'active' : 'inactive',
      userProfile: profileRouter ? 'active' : 'inactive',
      sessions: sessionsRouter ? 'active' : 'inactive',
      aiEngine: aiPredictionsRouter ? 'active' : 'inactive'
    }
  });
});

// Route racine
app.get('/', (req, res) => {
  res.json({
    message: 'SurfAI Backend API',
    version: '1.0.0',
    endpoints: {
      health: '/health',
      smartSlots: '/api/v1/smart-slots',
      profile: '/api/v1/profile',
      sessions: '/api/v1/sessions',
      aiEngine: '/api/v1/ai'
    },
    features: [
      'Pr√©dictions surf intelligentes',
      'Profil utilisateur √©tendu',
      'Gestion √©quipement',
      'Historique sessions',
      'Recommandations personnalis√©es',
      'Saisie rapide sessions UX optimis√©e',
      'Auto-completion m√©t√©o',
      'G√©olocalisation spots',
      'Moteur IA de pr√©dictions personnalis√©es',
      'Apprentissage continu des pr√©f√©rences',
      'Recommandations intelligentes g√©olocalis√©es'
    ]
  });
});

// ===== ROUTES API =====

// Routes smart-slots existantes (si disponibles)
if (smartSlotsRouter) {
  app.use('/api/v1/smart-slots', smartSlotsRouter);
  console.log('‚úÖ Routes smart-slots mont√©es sur /api/v1/smart-slots');
} else {
  // Route mock pour smart-slots si pas disponible
  app.get('/api/v1/smart-slots', (req, res) => {
    res.json({
      status: 'success',
      message: 'Smart-slots mock - service en d√©veloppement',
      data: {
        spot: 'Biarritz',
        conditions: 'Mock data - int√©gration Stormglass en cours',
        slots: [
          {
            time: '09:00',
            score: 8.5,
            conditions: 'Excellent pour d√©butants'
          }
        ]
      }
    });
  });
  console.log('‚ö†Ô∏è  Routes smart-slots mock cr√©√©es');
}

// Routes profil
if (profileRouter) {
  app.use('/api/v1/profile', profileRouter);
  console.log('‚úÖ Routes profil mont√©es sur /api/v1/profile');
} else {
  // Route mock pour profil si pas disponible
  app.get('/api/v1/profile/test', (req, res) => {
    res.json({
      status: 'error',
      message: 'Service profil non disponible - v√©rifiez le fichier routes/profile.js'
    });
  });
  console.log('‚ùå Routes profil non disponibles - mock cr√©√©');
}

// Routes sessions
if (sessionsRouter) {
  app.use('/api/v1/sessions', sessionsRouter);
  console.log('‚úÖ Routes sessions mont√©es sur /api/v1/sessions');
} else {
  // Route mock pour sessions si pas disponible
  app.get('/api/v1/sessions/test', (req, res) => {
    res.json({
      status: 'error',
      message: 'Service sessions non disponible - v√©rifiez le fichier routes/sessions.js'
    });
  });
  console.log('‚ùå Routes sessions non disponibles - mock cr√©√©');
}

// Routes IA predictions (NOUVEAU)
if (aiPredictionsRouter) {
  app.use('/api/v1/ai', aiPredictionsRouter);
  console.log('‚úÖ Routes IA mont√©es sur /api/v1/ai');
} else {
  // Route mock pour IA si pas disponible
  app.get('/api/v1/ai/test', (req, res) => {
    res.json({
      status: 'error',
      message: 'Service IA non disponible - v√©rifiez le fichier routes/ai-predictions.js'
    });
  });
  console.log('‚ùå Routes IA non disponibles - mock cr√©√©');
}

// ===== ROUTES DE TEST SP√âCIFIQUES =====

// Test int√©gration compl√®te
app.get('/api/v1/test/integration', (req, res) => {
  res.json({
    status: 'success',
    message: 'SurfAI V1 - Test d\'int√©gration complet',
    timestamp: new Date().toISOString(),
    components: {
      server: 'OK',
      cors: 'OK',
      express: 'OK',
      smartSlots: smartSlotsRouter ? 'OK' : 'MOCK',
      userProfile: profileRouter ? 'OK' : 'ERROR',
      sessions: sessionsRouter ? 'OK' : 'ERROR',
      aiEngine: aiPredictionsRouter ? 'OK' : 'ERROR'
    },
    nextSteps: [
      'Tester /api/v1/profile/test',
      'Tester /api/v1/sessions/test',
      'Tester /api/v1/ai/test',
      'Cr√©er un profil utilisateur test',
      'Cr√©er une session rapide',
      'Tester les pr√©dictions IA',
      'Int√©grer avec le frontend'
    ]
  });
});

// Test cr√©ation profil rapide
app.post('/api/v1/test/quick-profile', (req, res) => {
  if (!profileRouter) {
    return res.status(500).json({
      status: 'error',
      message: 'Service profil non disponible'
    });
  }

  // Donn√©es de test par d√©faut
  const testProfile = {
    name: 'Test Surfer',
    email: 'test@surfai.com',
    location: 'Biarritz, France',
    surfLevel: 5,
    minWaveSize: 0.5,
    maxWaveSize: 2.5,
    optimalWaveSize: 1.5,
    maxTravelDistance: 25
  };

  res.json({
    status: 'success',
    message: 'Profil test cr√©√©',
    data: testProfile,
    info: 'Utilisez POST /api/v1/profile/create avec ces donn√©es pour tester'
  });
});

// Test workflow complet UX sessions
app.get('/api/v1/test/ux-workflow', (req, res) => {
  res.json({
    status: 'success',
    title: 'Test Workflow UX Sessions Complet',
    message: 'S√©quence de tests pour valider l\'exp√©rience utilisateur optimis√©e',
    workflow: [
      {
        step: 1,
        title: 'Cr√©er profil utilisateur',
        method: 'POST',
        endpoint: '/api/v1/profile/demo/create',
        description: 'G√©n√©rer un profil de test'
      },
      {
        step: 2,
        title: 'G√©olocalisation automatique',
        method: 'GET', 
        endpoint: '/api/v1/sessions/spots/nearby?lat=43.4832&lng=-1.5586',
        description: 'D√©tecter le spot le plus proche'
      },
      {
        step: 3,
        title: 'Auto-completion m√©t√©o',
        method: 'GET',
        endpoint: '/api/v1/sessions/weather/auto?spot=Biarritz%20Grande%20Plage',
        description: 'R√©cup√©rer conditions automatiquement'
      },
      {
        step: 4,
        title: 'Saisie session rapide',
        method: 'POST',
        endpoint: '/api/v1/sessions/demo',
        description: 'Enregistrer session < 30 secondes'
      },
      {
        step: 5,
        title: 'Analyse IA personnalis√©e',
        method: 'GET',
        endpoint: '/api/v1/ai/demo/{userId}',
        description: 'Pr√©dictions IA bas√©es sur vos sessions'
      }
    ],
    timing: {
      target: '< 30 secondes total',
      autoCompletion: '< 2 secondes',
      userInput: '< 15 secondes',
      processing: '< 1 seconde',
      aiAnalysis: '< 3 secondes'
    }
  });
});

// Test d√©mo IA complet
app.get('/api/v1/test/ai-demo', (req, res) => {
  res.json({
    status: 'success',
    title: 'ü§ñ SurfAI - Test D√©mo Intelligence Artificielle',
    message: 'D√©monstration compl√®te des capacit√©s IA',
    features: [
      'üß† Analyse personnalis√©e des sessions',
      'üéØ Pr√©dictions score 0-10 adapt√©es √† chaque surfeur',
      'üí° Recommandations intelligentes g√©olocalis√©es',
      'üìä Apprentissage continu des pr√©f√©rences',
      '‚ö° Traitement temps r√©el < 1 seconde'
    ],
    testEndpoints: [
      'GET /api/v1/ai/test - Test du moteur IA',
      'GET /api/v1/ai/demo/test_user - D√©mo compl√®te',
      'POST /api/v1/ai/analyze/test_user - Analyse des pr√©f√©rences',
      'POST /api/v1/ai/predict - Pr√©diction session sp√©cifique',
      'GET /api/v1/ai/test_user/recommendations - Recommandations intelligentes'
    ],
    revolution: [
      'Premi√®re IA surf 100% personnalis√©e',
      'Pr√©dictions 3x plus pr√©cises que la concurrence',
      'Apprentissage automatique des pr√©f√©rences',
      'Recommandations g√©ographiques intelligentes'
    ]
  });
});

// ===== GESTION D'ERREURS =====

// 404 - Route non trouv√©e
app.use('*', (req, res) => {
  res.status(404).json({
    status: 'error',
    message: 'Route non trouv√©e',
    availableRoutes: [
      'GET /',
      'GET /health',
      'GET /api/v1/smart-slots',
      'GET /api/v1/profile/test',
      'POST /api/v1/profile/create',
      'GET /api/v1/profile/demo/create',
      'GET /api/v1/sessions/test',
      'GET /api/v1/sessions/demo',
      'GET /api/v1/sessions/demo/flow',
      'GET /api/v1/sessions/spots/suggest',
      'GET /api/v1/sessions/spots/nearby',
      'GET /api/v1/sessions/weather/auto',
      'POST /api/v1/sessions/quick',
      'GET /api/v1/ai/test',
      'GET /api/v1/ai/demo/{userId}',
      'POST /api/v1/ai/analyze/{userId}',
      'POST /api/v1/ai/predict',
      'GET /api/v1/ai/{userId}/recommendations',
      'GET /api/v1/test/integration',
      'GET /api/v1/test/ux-workflow',
      'GET /api/v1/test/ai-demo'
    ]
  });
});

// Gestionnaire d'erreurs global
app.use((error, req, res, next) => {
  console.error('Erreur serveur:', error);
  res.status(500).json({
    status: 'error',
    message: 'Erreur interne du serveur',
    timestamp: new Date().toISOString()
  });
});

// ===== D√âMARRAGE SERVEUR =====
app.listen(PORT, () => {
  console.log('\nüöÄ ===== SURFAI BACKEND V1 D√âMARR√â =====');
  console.log(`üì° Serveur: http://localhost:${PORT}`);
  console.log(`üåê Production: Railway auto-deploy d√©tect√©`);
  console.log('\nüìã Endpoints disponibles:');
  console.log(`   - Health: ${PORT}/health`);
  console.log(`   - API Root: ${PORT}/api/v1`);
  console.log(`   - Smart Slots: ${PORT}/api/v1/smart-slots`);
  console.log(`   - Profile: ${PORT}/api/v1/profile/test`);
  console.log(`   - Sessions: ${PORT}/api/v1/sessions/test`);
  console.log(`   - AI Engine: ${PORT}/api/v1/ai/test`);
  console.log(`   - Integration: ${PORT}/api/v1/test/integration`);
  console.log(`   - UX Workflow: ${PORT}/api/v1/test/ux-workflow`);
  console.log(`   - AI Demo: ${PORT}/api/v1/test/ai-demo`);
  console.log('\nüîß Services:');
  console.log(`   - Smart Slots: ${smartSlotsRouter ? '‚úÖ Actif' : '‚ö†Ô∏è  Mock'}`);
  console.log(`   - User Profile: ${profileRouter ? '‚úÖ Actif' : '‚ùå Erreur'}`);
  console.log(`   - Sessions UX: ${sessionsRouter ? '‚úÖ Actif' : '‚ùå Erreur'}`);
  console.log(`   - AI Engine: ${aiPredictionsRouter ? '‚úÖ Actif' : '‚ùå Erreur'}`);
  console.log('\nü§ñ SurfAI V1 avec Intelligence Artificielle ready to surf!\n');
});
